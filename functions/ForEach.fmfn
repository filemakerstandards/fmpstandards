/**
 * =====================================
 * ForEach ( valuesOrArray ; iteratorString )
 *
 * PURPOSE:
 *		ForEach is specifically designed as syntactic sugar for making it easy
 *		to process either a simple list of values or a JSON array within the
 *		Exit Loop If step. The function uses a creative technique of converting
 *		the inbound iteratorString into a numerical value so it can be used
 *		as a repetition number for "privately" scoped variables used for
 *		processing the data.
 *
 * NOTE:
 *		This function adds some cycle processing overhead to a scripted Loop.
 *		IMPORTANT: When processing a JSON array a unique $[iteratorString].value
 *		is created for each array item.
 *
 * RETURNS:
 *		A boolean value based on having processed all items in valuesOrArray.
 *
 * EXAMPLE:
 *		Exit Loop If [ ForEach ( List ( "one"; "two"; "three" ) ; "$i" ) ]
 *		Exit Loop If [ ForEach ( $array ; "$item" ) ] // Access with $item.value
 *
 * PARAMETERS:
 *		valuesOrArray: A ¶-delimited list or a valid JSON array.
 *		iteratorString: The name of your iterator. Either "i" or more clearly "$i"
 *
 * DEPENDENCIES: none
 *
 * RELEASE:	2025-05-13
 *
 * REFERENCES:
 *		Original inspiration from Fabrice Nordmann's FOR.list function.
 *		Adaptation by Josh Ormond and others 2023-OCT-12 to integrate $[iteratorString].value
 *		Revised by Matt Petrowsky to accept both List() values and JSON
 *			array items. Optimized to use private vars.
 * =====================================
 */

Let ( [
	// Converting the supplied iterator name into a number for use with privately scoped variables.
	~code = Code ( iteratorString );

	// Determine if it's a simple list of values or a JSON Array. Avoid multiple expensive calls!
	~isArray = If ( IsEmpty ( $~ForEach_parsed[~code] ) ;
			Let ( [
					$~ForEach_parsed[~code] = JSONGetElementType ( valuesOrArray ; "" ) = JSONArray;
					$~ForEach_values[~code] = If ( $~ForEach_parsed[~code] ; JSONListValues ( valuesOrArray ; "" ) );
					$~ForEach_count[~code] = If ( $~ForEach_parsed[~code] ; ValueCount ( JSONListKeys ( valuesOrArray ; "" ) ) );

					// Possible future use. Unclean means your JSONListValues() is a condensed list of values.
					$~ForEach_clean[~code] = If ( $~ForEach_parsed[~code] ; $~ForEach_count[~code] = ValueCount ( $~ForEach_values[~code] ) )
				];
					$~ForEach_parsed[~code]
				);
					$~ForEach_parsed[~code]
			);

	// Warning: JSONListValues() may condense the array because of null and blank/empty values.
	~values = If ( ~isArray ; $~ForEach_values[~code] ; valuesOrArray );

	// Only allowing local variables and filtering for invalid values (see below) allowing either "i" or "$i" (for clarity).
	~iterator = Filter ( "$" & Substitute ( iteratorString ; "$" ; "" ) ; "$ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_." );
	~increment = "Let (" & ~iterator & " = " & ~iterator & " + 1 ; False )";
	~reset = "Let (" & ~iterator & " = " & "\"\" ; \"\")";

	// Self-initializing iterators.
	~initialize = "Let ( " & ~iterator & " = \"\" ; True )";
	~iteratorValue = Int ( Evaluate ( ~iterator ) );
	~iteratorValid = If ( IsEmpty ( ~iteratorValue ) ; not EvaluationError ( Evaluate ( ~initialize ) ) ; True );

	// Compliments to Ormond, Halpern, & others.
	~jsonElement = "Let ( " & ~iterator & ".value = " & Quote ( JSONGetElement ( valuesOrArray ; "[" & ~iteratorValue & "]" ) ) & "; \"\")";
	~jsonEval = If ( ~isArray ; Evaluate ( ~jsonElement ) )
];
	Case (
		IsEmpty ( valuesOrArray )
		or IsEmpty ( ~iterator )
		or Exact ( ~iterator ; "$" )
		or not ~iteratorValid
		or ~iteratorValue ≥ If ( ~isArray ; $~ForEach_count[~code] ; ValueCount ( ~values ) );
			GetAsBoolean ( True & Evaluate ( ~reset ) );

		Evaluate ( ~increment )
	)
)

/*
It's much easier to simply filter for allowed values within iterators than
account for all the possible invalid variable choices.

Invalid variable values from FileMaker prompt.
• + - * / ^ & = ≠ < > ≤ ≥ ( , ; ) [ ] " :: $ }
• contains: AND, OR, XOR, NOT
• begins with a digit or a period
• or has the same name as a function, parameter or keyword.
*/